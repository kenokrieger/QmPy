#!/usr/bin/env python3
"""
This is an executable script that uses the modules fileio,
_interpolation, graphics, and solvers to solve the Schrodingers
equation and graphicate the results
"""

import argparse
import os
import numpy as np
from qmpy._fileio import _read_schrodinger, _write_data
from qmpy._interpolation import _interpolate
from qmpy.solvers import schroedinger, calculate_expval, calculate_uncertainty
from qmpy.graphics import qm_plottings


def schrodingers_solver():
    """
    Solves the 1D Schrodinger's time-independent equation
    for any type of potential and graphicates its solution. The
    output graphs are shown on screen after executing the program and
    the data generated by solving the Schrodinger's equation is written
    in a series of output files (potentials.dat, energies.dat, wavefuncs.dat,
    and expvalues.dat). It needs an input file named schrodinger.inp with
    the data needed to solve the equation. The schrodinger.inp file needs to
    have following format:

        (float) # mass
        (float) (float) (int) # xMin xMax nPoint
        (int) (int) # first and last eigenvalue to print
        (str(can be linear, polynomial, or cspline)) # interpolation type
        (int) # nr. of interpolation points and xy declarations
        (float) (float)
        ...

    Example:
        2.0 # mass
        -2.0 2.0 1999 # xMin xMax nPoint
        1 5 # first and last eigenvalue to print
        linear # interpolation type
        2 # nr. of interpolation points and xy declarations
        -2.0 0.0
        2.0 0.0

    """
    ipath, opath, scale = _parsecmd()
    schrodingers_path = os.path.join(ipath, "schrodinger.inp")
    specs = _read_schrodinger(schrodingers_path)
    xx = specs['interpolxydecs'][:, 0]
    yy = specs['interpolxydecs'][:, 1]
    xint, pots = _interpolate(xx, yy, specs['xopt'], specs['interpoltype'])
    ev_range = (specs['first_ev'] - 1, specs['last_ev'] - 1)
    energies, wfuncs = schroedinger(specs['mass'], xint, pots,
                                    select_range=ev_range)
    expvals = calculate_expval(xint, wfuncs)
    uncertainties = calculate_uncertainty(xint, wfuncs)

    expvallist = (expvals, uncertainties)
    expvaldata = np.array(expvallist)
    _write_data(opath, pots, energies, wfuncs, expvaldata)
    qm_plottings(opath, scale=scale)


def _parsecmd():
    """
    Parses the input from the command line to the program.

    Returns:
        ipath (path): The input directory.
        opath (path): The output directory.
        scale (float): Optional. A scale to apply to the wavefunctions.

    """
    description = 'Solves the Schrodinger equation and graphicates its results'
    parser = argparse.ArgumentParser(description=description)
    msg = "Input directory"
    parser.add_argument('-i', '--idirectory', default='.', help=msg)
    msg = "Output directory"
    parser.add_argument('-o', '--odirectory', default='.', help=msg)
    msg = "Scale factor for the wave functions"
    parser.add_argument('-s', '--sfactor', default=None, help=msg)
    args = parser.parse_asrgs()

    ipath = args.idirectory
    opath = args.odirectory
    scale = float(args.sfactor)

    return ipath, opath, scale


if __name__ == "_main_":
    schrodingers_solver()
